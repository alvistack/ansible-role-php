---

# (c) Wong Hoi Sing Edison <hswong3i@pantarei-design.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: include default variables
  include_vars: "../vars/main.yml"
  tags: php

- name: include release specific variables
  include_vars: "{{ loop_var }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths: "../vars"
  loop_control:
    loop_var: "loop_var"
  ignore_errors: true
  tags: php

- name: include release specific tasks
  include_tasks: "{{ loop_var }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths: "."
  loop_control:
    loop_var: "loop_var"
  ignore_errors: true
  tags: php

- name: prepare directories
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
    state: "{{ item.state | default('directory') }}"
  with_items:
    - { dest: "/usr/local/share/composer" }
  tags: php

- name: copy templates
  template:
    dest: "{{ item.dest }}"
    src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  with_items:
    - { dest: "/etc/profile.d/composer.sh" }
  tags: php

- name: install composer globally (snapshot channel)
  shell: |
    set -o pipefail
    curl -skL https://getcomposer.org/installer | php -- \
      --snapshot \
      --install-dir=/usr/local/bin \
      --filename=composer
  args:
    executable: "/bin/bash"
    creates: "/usr/local/bin/composer"
  register: result
  until: result is succeeded
  tags: php

- name: composer self-update (stable channel)
  shell: |
    set -o pipefail
    su -l -s /bin/bash -c 'composer self-update --stable --no-interaction'
  args:
    executable: "/bin/bash"
  register: result
  until: result is succeeded
  changed_when: "'You are already using composer' not in result.stderr"
  ignore_errors: true
  tags: php

- name: composer global init
  shell: |
    set -o pipefail
    su -l -s /bin/bash -c 'composer global init --no-interaction'
  args:
    executable: "/bin/bash"
    creates: "/usr/local/share/composer/composer.json"
  register: result
  changed_when: result is not succeeded
  tags: php

- name: composer global require
  shell: |
    set -o pipefail
    su -l -s /bin/bash -c 'composer global {{ item.state }} {{ item.name }} --no-interaction'
  args:
    executable: "/bin/bash"
  with_items:
    - { state: 'require', name: 'hirak/prestissimo:@stable' }
    - { state: 'require', name: 'consolidation/cgr:@stable' }
  register: result
  until: result is succeeded
  changed_when: result is not succeeded
  tags: php

- name: composer global update
  shell: |
    set -o pipefail
    su -l -s /bin/bash -c 'composer global update'
  args:
    executable: "/bin/bash"
  register: result
  until: result is succeeded
  changed_when: result is not succeeded
  tags: php

- name: cgr require
  shell: |
    set -o pipefail
    su -l -s /bin/bash -c 'cgr {{ item.state }} {{ item.name }}'
  args:
    executable: "/bin/bash"
  with_items: "{{ cgr }}"
  register: result
  until: result is succeeded
  changed_when: result is not succeeded
  tags: php

- name: cgr update
  shell: |
    set -o pipefail
    su -l -s /bin/bash -c 'cgr update'
  args:
    executable: "/bin/bash"
  register: result
  until: result is succeeded
  changed_when: "'Package operations:' in result.stderr"
  tags: php
